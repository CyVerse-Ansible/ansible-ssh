---

### cso-ssh.yml ###

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"
    - "defaults.yml"
  tags: vars

- name: install ssh server
  package: name={{ item }} state=present
  with_items: '{{ PACKAGES }}'
  tags: install

- name: copy motd.ssh
  copy: src=files/motd dest=/etc/motd.ssh mode=0444
  tags: copy-motd

- name: configure ssh
  template: src={{ item }} dest={{ SSH_CONFIG }} backup=yes
  with_first_found:
    - "templates/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.sshd_config.j2"
    - "templates/{{ ansible_distribution }}.sshd_config.j2"
    - "templates/{{ ansible_os_family }}.sshd_config.j2"
    - "templates/default.sshd_config.j2"
  tags: template-sshd-config

- name: make sure ssh directory exists
  file: path=/root/.ssh/ state=directory mode="0700"
  tags: create-root-ssh-dir

- name: add ssh keys to authorized_keys
  authorized_key: user=root key="{{ item }}" state=present
  with_items: "{{ SSHKEYS | default([]) }}"
  tags: add-ssh-keys

- name: remove ssh keys from authorized_keys
  authorized_key: user=root key="{{ item }}" state=absent
  with_items: "{{ SSH_KEYS_REMOVE | default([]) }}"
  tags: remove-ssh-keys

- name: disable selinux
  selinux: state=disabled
  when: ansible_os_family == "RedHat"
  tags: disable-centos-selinux

- name: add ssh port to selinux
  command: semanage port -a -t ssh_port_t -p tcp {{ SSH_PORT }}
  when: ansible_os_family == "RedHat" and {{ SSH_PORT }} != '22'
  ignore_errors: yes
  tags: add-ssh-port-semanage

- name: remove old ssh port to selinux (if applicable)
  command: semanage port -d -t ssh_port_t -p tcp 22
  when: ansible_os_family == "RedHat" and {{ SSH_PORT }} != '22'
  ignore_errors: yes
  tags: remove-old-ssh-port-semanage

- name: restart ssh service
  service: name={{ SSHD }} state=restarted enabled=yes
  tags: restart-ssh

### cso-ssh-key-setup.yml ###

- name: generate ssh keys
  user: name=root generate_ssh_key=yes ssh_key_bits=4096 ssh_key_file=.ssh/id_rsa

- name: retrieve remote ssh public key
  fetch: dest="/tmp/{{ ansible_hostname }}.pub" src="~/.ssh/id_rsa.pub" flat=yes

- name: distribute keys to all hosts
  authorized_key: >
    key="{{ lookup('file', '/tmp/'+ item +'.pub') }}"
    state=present
    user=root
  with_items: "groups['{{ SSH_CONFIG.group | default([])}}']"
  ignore_errors: yes

- name: remove temp local pubkey copies
  local_action: file dest="/tmp/{{ ansible_hostname }}.pub" state=absent
  ignore_errors: yes

### atmo-ssh-setup.yml" ###

- name: set python for centos-5
  set_fact: ansible_python_interpreter=/usr/bin/python
  tags: python
 # when: is_cent and is_cent5

- name: get atmo vm ip address
  set_fact: vm_ip="{{ ansible_host }}"

- debug: msg="Atmo VM IP is {{ vm_ip }}"

- name: test default ansible connection
  local_action: "shell ssh -p {{ ansible_port }} root@{{ vm_ip }} 'echo hello world test' | grep 'hello world test'"
  register: default_remote_user
  ignore_errors: yes
  failed_when: False

###
# CENTOS SETUP
###
- name: test centos connection
  local_action: "shell ssh -p {{ ansible_port }} centos@{{ vm_ip }} 'echo hello'"
  register: centos_remote_user
  ignore_errors: yes
  failed_when: False
  when: default_remote_user|failed

# note: success is apparently not a complete condition, must also check for skipped state
- name: register use_remote_user = centos
  set_fact: use_remote_user=centos
  when: not centos_remote_user|skipped and centos_remote_user|success

- when: not centos_remote_user|skipped and centos_remote_user|success
  block:
    - name: task to clear the tty from sudoers
      raw: sed -i '/^Defaults\s*requiretty/d' /etc/sudoers
      become: true
      remote_user: "{{ use_remote_user }}"

    - name: remove the standard cloud disable command
      lineinfile: dest=/root/.ssh/authorized_keys state=absent regexp="command\="
      become: true
      remote_user: "{{ use_remote_user }}"

    - name: add ssh keys to authorzied_keys
      authorized_key: user=root key="{{ item }}" state=present
      become: true
      remote_user: "{{ use_remote_user }}"
      with_items:
        '{{ SSHKEYS | default([]) }}'

###
# UBUNTU SETUP
###
- name: test ubuntu connection
  local_action: "shell ssh -p {{ ansible_port }} ubuntu@{{ vm_ip }} 'echo hello'"
  register: ubuntu_remote_user
  ignore_errors: yes
  failed_when: False
  when: default_remote_user|failed and centos_remote_user|failed

# note: success is apparently not a complete condition, must also check for skipped state
- name: register use_remote_user = ubuntu
  set_fact: use_remote_user=ubuntu
  when: not ubuntu_remote_user|skipped and ubuntu_remote_user|success

- include: atmo-ssh-setup-root.yml
  when: not ubuntu_remote_user|skipped and ubuntu_remote_user|success

###
# WRAP-UP CLOUD USER FIX
###
- name: root should be able to access at this point. perform a simple ping
  ping:

# this may be needed when default_remote_user succeeded
- name: make sure ssh directory exists
  file: path=/root/.ssh/ state=directory mode="0700"
  when: default_remote_user|success

# this is duplicated code from that of the setup-root, but this needs to be run if root succeeded initially
- name: add ssh keys to authorzied_keys
  authorized_key: user=root key="{{ item }}" state=present
  with_items:
    '{{ SSHKEYS | default([]) }}'
  when: default_remote_user|success

# at this point, we could disable cloud user, but for now, let's leave in.

###
# OTHER SSH CONFIG CHANGES
##
- name: /etc/ssh/sshd_config changes
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="{{ item.regexp }}" line="{{ item.line }}"
  with_items:
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin without-password'}
    - { regexp: '^UseDNS', line: 'UseDNS no'}
  
  #if port line is commented or not commented out it is removed
- name: ensure that the ports are correct in sshd_config
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="^Port" state=absent
- lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="^#Port" state=absent
  
  #add 'Port 22' entry
- lineinfile: dest=/etc/ssh/sshd_config backup=yes backrefs=yes regexp="^# What ports, IPs and protocols we listen for" line="# What ports, IPs and protocols we listen for\nPort 22"
  when: ansible_distribution == "Ubuntu"
- lineinfile: dest=/etc/ssh/sshd_config backup=yes backrefs=yes regexp="^# default value." line="# default value.\nPort 22"
  when: ansible_distribution == "CentOS"

- name: Remove all AllowUsers lines to /etc/sshd_config
  lineinfile: dest=/etc/ssh/sshd_config regexp="{{ item }}" state=absent
  with_items:
    - AllowUsers
    - AllowGroups
  tags:
    - debug
    - delete

- name: Append AllowGroups Line to /etc/ssh/sshd_config 
  lineinfile: dest=/etc/ssh/sshd_config line="AllowGroups {{ SSH_ALLOW_GROUPS | default([])}}"
  tags:
    - debug

- name: Add '{{ ATMOUSERNAME }}' to users group in Ubuntu
  user: append=yes groups=users name='{{ ATMOUSERNAME }}'
  when: ansible_distribution == "Ubuntu"

- name: Add '{{ ansible_user_id }}' to users group in Ubuntu
  user: append=yes groups=users name='{{ ansible_user_id }}'
  when: ansible_distribution == "Ubuntu"

- name: manual OS detection
  stat: path=/etc/redhat-release
  register: os_ver
  tags:
    - debug
    - ssh-restart

- name: restart ssh if ubuntu
  service: name=ssh state=restarted
  when: not os_ver.stat.exists
  tags:
    - debug
    - ssh-restart

- name: restart sshd if centos
  service: name=sshd state=restarted
  when: os_ver.stat.exists
  tags:
    - debug
    - ssh-restart
