---

### cso-ssh.yml ###

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"
    - "defaults.yml"
  tags: vars

- name: install ssh server
  package: name={{ item }} state=present
  with_items: '{{ PACKAGES }}'
  tags: install

- name: copy motd.ssh
  copy: src=files/motd dest=/etc/motd.ssh mode=0444
  tags: copy-motd

- name: configure ssh
  template: src={{ item }} dest={{ SSH_CONFIG }} backup=yes
  with_first_found:
    - "templates/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.sshd_config.j2"
    - "templates/{{ ansible_distribution }}.sshd_config.j2"
    - "templates/{{ ansible_os_family }}.sshd_config.j2"
    - "templates/default.sshd_config.j2"
  tags: template-sshd-config

- name: make sure ssh directory exists
  file: path=/root/.ssh/ state=directory mode="0700"
  tags: create-root-ssh-dir

- name: add ssh keys to authorized_keys
  authorized_key: user=root key="{{ item }}" state=present
  with_items: "{{ SSHKEYS | default([]) }}"
  tags: add-ssh-keys

- name: remove ssh keys from authorized_keys
  authorized_key: user=root key="{{ item }}" state=absent
  with_items: "{{ SSH_KEYS_REMOVE | default([]) }}"
  tags: remove-ssh-keys

- name: disable selinux
  selinux: state=disabled
  when: ansible_os_family == "RedHat"
  tags: disable-centos-selinux

- name: add ssh port to selinux
  command: semanage port -a -t ssh_port_t -p tcp {{ SSH_PORT }}
  when: ansible_os_family == "RedHat" and {{ SSH_PORT }} != '22'
  ignore_errors: yes
  tags: add-ssh-port-semanage

- name: remove old ssh port to selinux (if applicable)
  command: semanage port -d -t ssh_port_t -p tcp 22
  when: ansible_os_family == "RedHat" and {{ SSH_PORT }} != '22'
  ignore_errors: yes
  tags: remove-old-ssh-port-semanage

### cso-ssh-key-setup.yml ###

- name: generate ssh keys
  user: name=root generate_ssh_key=yes ssh_key_bits=4096 ssh_key_file=.ssh/id_rsa

- name: retrieve remote ssh public key
  fetch: dest="/tmp/{{ ansible_hostname }}.pub" src="~/.ssh/id_rsa.pub" flat=yes

- name: distribute keys to all hosts
  authorized_key: >
    key="{{ lookup('file', '/tmp/'+ item +'.pub') }}"
    state=present
    user=root
  with_items: "groups['{{ SSH_CONFIG.group | default([])}}']"
  ignore_errors: yes

- name: remove temp local pubkey copies
  local_action: file dest="/tmp/{{ ansible_hostname }}.pub" state=absent
  ignore_errors: yes

### atmo-ssh-setup.yml" ###

- name: set python for centos-5
  set_fact: ansible_python_interpreter=/usr/bin/python
  tags: python
 # when: is_cent and is_cent5

- name: get atmo vm ip address
  set_fact: vm_ip="{{ ansible_host }}"

- debug: msg="Atmo VM IP is {{ vm_ip }}"

- name: test default ansible connection
  local_action: "shell ssh -p {{ ansible_port }} root@{{ vm_ip }} 'echo hello world test' | grep 'hello world test'"
  register: default_remote_user
  ignore_errors: yes
  failed_when: False

###
# CENTOS SETUP
###
- name: test centos connection
  local_action: "shell ssh -p {{ ansible_port }} centos@{{ vm_ip }} 'echo hello'"
  register: centos_remote_user
  ignore_errors: yes
  failed_when: False
  when: default_remote_user|failed

# note: success is apparently not a complete condition, must also check for skipped state
- name: register use_remote_user = centos
  set_fact: use_remote_user=centos
  when: not centos_remote_user|skipped and centos_remote_user|success

- when: not centos_remote_user|skipped and centos_remote_user|success
  block:
    - name: task to clear the tty from sudoers
      raw: sed -i '/^Defaults\s*requiretty/d' /etc/sudoers
      become: true
      remote_user: "{{ use_remote_user }}"

    - name: remove the standard cloud disable command
      lineinfile: dest=/root/.ssh/authorized_keys state=absent regexp="command\="
      become: true
      remote_user: "{{ use_remote_user }}"

    - name: add ssh keys to authorzied_keys
      authorized_key: user=root key="{{ item }}" state=present
      become: true
      remote_user: "{{ use_remote_user }}"
      with_items:
        '{{ SSHKEYS | default([]) }}'

###
# UBUNTU SETUP
###
- name: test ubuntu connection
  local_action: "shell ssh -p {{ ansible_port }} ubuntu@{{ vm_ip }} 'echo hello'"
  register: ubuntu_remote_user
  ignore_errors: yes
  failed_when: False
  when: default_remote_user|failed and centos_remote_user|failed

# note: success is apparently not a complete condition, must also check for skipped state
- name: register use_remote_user = ubuntu
  set_fact: use_remote_user=ubuntu
  when: not ubuntu_remote_user|skipped and ubuntu_remote_user|success

- include: atmo-ssh-setup-root.yml
  when: not ubuntu_remote_user|skipped and ubuntu_remote_user|success

###
# WRAP-UP CLOUD USER FIX
###
- name: root should be able to access at this point. perform a simple ping
  ping:

# this may be needed when default_remote_user succeeded
- name: make sure ssh directory exists
  file: path=/root/.ssh/ state=directory mode="0700"
  when: default_remote_user|success

# this is duplicated code from that of the setup-root, but this needs to be run if root succeeded initially
- name: add ssh keys to authorzied_keys
  authorized_key: user=root key="{{ item }}" state=present
  with_items:
    '{{ SSHKEYS | default([]) }}'
  when: default_remote_user|success

# at this point, we could disable cloud user, but for now, let's leave in.

###
# OTHER SSH CONFIG CHANGES
##
- name: /etc/ssh/sshd_config changes
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="{{ item.regexp }}" line="{{ item.line }}"
  with_items:
    - { regexp: '^PermitRootLogin', line: 'PermitRootLogin without-password'}
    - { regexp: '^UseDNS', line: 'UseDNS no'}
  
  #if port line is commented or not commented out it is removed
- name: ensure that the ports are correct in sshd_config
  lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="^Port" state=absent
- lineinfile: dest=/etc/ssh/sshd_config backup=yes regexp="^#Port" state=absent
  
  #add 'Port 22' entry
- lineinfile: dest=/etc/ssh/sshd_config backup=yes backrefs=yes regexp="^# What ports, IPs and protocols we listen for" line="# What ports, IPs and protocols we listen for\nPort 22"
  when: ansible_distribution == "Ubuntu"
- lineinfile: dest=/etc/ssh/sshd_config backup=yes backrefs=yes regexp="^# default value." line="# default value.\nPort 22"
  when: ansible_distribution == "CentOS"

- name: Remove all AllowUsers lines to /etc/sshd_config
  lineinfile: dest=/etc/ssh/sshd_config regexp="{{ item }}" state=absent
  with_items:
    - AllowUsers
    - AllowGroups
  tags:
    - debug
    - delete

- name: Append AllowGroups Line to /etc/ssh/sshd_config 
  lineinfile: dest=/etc/ssh/sshd_config line="AllowGroups {{ SSH_ALLOW_GROUPS | default([])}}"
  tags:
    - debug

- name: Add '{{ ATMOUSERNAME }}' to users group in Ubuntu
  user: append=yes groups=users name='{{ ATMOUSERNAME }}'
  when: ansible_distribution == "Ubuntu"

- name: Add '{{ ansible_user_id }}' to users group in Ubuntu
  user: append=yes groups=users name='{{ ansible_user_id }}'
  when: ansible_distribution == "Ubuntu"

- name: manual OS detection
  stat: path=/etc/redhat-release
  register: os_ver
  tags:
    - debug
    - ssh-restart

- name: restart ssh if ubuntu
  service: name=ssh state=restarted
  when: not os_ver.stat.exists
  tags:
    - debug
    - ssh-restart

- name: restart sshd if centos
  service: name=sshd state=restarted
  when: os_ver.stat.exists
  tags:
    - debug
    - ssh-restart

### atmo-user-ssh-keys.yml ###

- name: Add users ssh keys to authorized_keys
  authorized_key: user=root key="{{ item }}" state=present
  with_items: "{{ SSHKEYS | default([]) }}"
  become: yes
  when: SSHKEYS is defined

- name: Add users ssh keys to authorized_keys to home directory of user
  authorized_key: user="{{ ATMOUSERNAME | default([]) }}" key="{{ SSHKEYS | join("\n") }}" state=present exclusive=yes
  when: SSHKEYS is defined

### atmo-common.yml ###

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "vars/{{ ansible_distribution }}.yml"
  tags: vars

###########
# Install #
###########
- name: install dependencies
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=present
  with_items: '{{ PACKAGES }}'
  tags: install

########
# MOTD #
########
- name: install motd
  copy: src=motd dest=/etc/motd

- name: remove motd help text file, if present
  file: path=/etc/update-motd.d/10-help-text state=absent
  when: ansible_distribution == "Ubuntu"

##########
# CentOS #
##########
- name: disable SELinux for CentOS versions greater than 5
  selinux: state=disabled
  when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version > '5')
  tags: selinux

- name: disable SELinux for CentOS 5
  selinux: state=disabled conf=/etc/selinux/semanage.conf
  when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version == '5')
  tags: selinux

- name: download get-pip.py
  shell: wget https://bootstrap.pypa.io/get-pip.py -O /tmp/get-pip.py --no-check-certificate
  when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version == '5')

- name: install/upgrade pip
  shell: /usr/bin/python26 get-pip.py chdir=/tmp/
  when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version == '5')

##########
# Ubuntu #
##########
- name: check ubuntu legal notice
  stat: path=/etc/legal
  register: ubuntu_legal
  when: ansible_distribution == "Ubuntu"
  tags:
    - legal

- name: move ubuntu legal file if it exists
  command: mv /etc/legal /etc/legal.disabled
  when: (ansible_distribution == "Ubuntu") and (ubuntu_legal.stat.exists is defined) and (ubuntu_legal.stat.exists)
  tags:
    - legal

###########
# General #
###########

- name: remove references to rc.local.atmo in rc.local
  lineinfile: dest=/etc/rc.d/rc.local state=absent line="\n# this is for atmosphere\nif [ -x /etc/rc.d/rc.local.atmo ]; then\n\t/etc/rc.d/rc.local.atmo\nfi" 
  when: ansible_distribution == "CentOS"
  failed_when: False

- name: remove rc.local.atmo file
  file: path={{ RC_LOCAL_ATMO }} state=absent
  failed_when: False

- name: load acpiphp module
  modprobe: name="{{ item }}" state=present
  with_items: "{{ MODULES_TO_LOAD | default([])}}"
  when: MODULES_TO_LOAD is defined

- name: copy fuse conf file over
  copy: src=files/fuse.conf dest=/etc/fuse.conf

- name: change fusermount permissions
  file: path=/bin/fusermount state=touch mode="u+s,a+rx"

- name: make sure ssh directory exists
  file: path=/root/.ssh/ state=directory mode="0700"

- name: Check for file /etc/aliases
  stat: path=/etc/aliases
  register: aliases
  tags: email

- name: disable mail_always to prevent Ansible from spamming security
  lineinfile: dest='{{ item.dest }}' regexp='{{ item.regexp }}' line='{{ item.line }}'
  with_items:
    - { dest: '/etc/sudoers', regexp: 'Defaults mail_always', line: '#Defaults mail_always' }
  tags: email

- name: disable support mailer in aliases to prevent Ansible from spamming security
  lineinfile: dest='{{ item.dest }}' regexp='{{ item.regexp }}' line='{{ item.line }}'
  with_items:
    - { dest: '/etc/aliases', regexp: '^(.*)support:(.*)', line: '#support:        postmaster' }
  when: aliases.stat.exists
  tags: email

- name: restart ssh service
  service: name={{ SSHD }} state=restarted enabled=yes
  tags: restart-ssh
